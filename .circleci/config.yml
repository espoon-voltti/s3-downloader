# SPDX-FileCopyrightText: 2018-2020 City of Espoo
#
# SPDX-License-Identifier: MIT

version: 2.1

orbs:
  slack: circleci/slack@4.0.2

parameters:
  golang_image_version:
    type: string
    default: "1.12"
  ghr_version:
    type: string
    default: "v0.13.0"

aliases:
  - &workspace_root /home/circleci/repo
  - &default_contexts
    context:
      - voltti-dockerhub
      - voltti-slack
  - &tag_filter
    tags:
      only: /^v\d+\.\d+\.\d+$/

commands:
  # Must be the last step in a job
  notify_slack:
    description: "Notify via Slack"
    steps:
      # Use a custom Voltti template that includes the project name in the Slack message. This can be removed if the
      # basic_fail_1 template included with the Slack orb is changed to include the project name.
      - run:
          when: on_fail
          name: Read Voltti Slack template from file
          command: |
            echo "export VOLTTI_SLACK_TEMPLATE='$(cat .circleci/voltti-slack-fail-template.json)'" >> $BASH_ENV
      - slack/notify:
          branch_pattern: master
          channel: alerts
          event: fail
          template: VOLTTI_SLACK_TEMPLATE

executors:
  golang:
    docker:
      - image: cimg/go:<< pipeline.parameters.golang_image_version >>
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    working_directory: *workspace_root

jobs:
  lint:
    executor: golang
    steps:
      - checkout
      - run: go version
      - run:
          name: gofmt check
          command: |
            unformatted=$(gofmt -l .)
            [ -z "$unformatted" ] && exit 0

            echo >&2 "Incorrectly formatted files. Please run:"
            for fn in $unformatted; do
              echo >&2 "  gofmt -w $PWD/$fn"
            done

            exit 1

  build:
    executor: golang
    steps:
      - checkout
      - run: go version
      - restore_cache:
          keys:
            - go-mod-v3-{{ checksum "go.sum" }}
      - run: go mod download
      - save_cache:
          key: go-mod-v3-{{ checksum "go.sum" }}
          paths:
            - "/home/circleci/go/pkg/mod"
      - run: make build
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - bin/*
      - notify_slack

  release:
    executor: golang
    environment:
      ARTIFACT: bin/s3downloader-linux-amd64
      PROJECT: voltti/s3-downloader
    steps:
      - attach_workspace:
          at: ./
      - restore_cache:
          keys:
            - go-ghr-v2-<< pipeline.parameters.ghr_version >>
      - run:
          name: Install ghr
          command: |
            export GO111MODULE=on
            go get github.com/tcnksm/ghr@<< pipeline.parameters.ghr_version >>
      - save_cache:
          key: go-ghr-v2-<< pipeline.parameters.ghr_version >>
          paths:
            - "/home/circleci/go/bin"
      - run:
          name: Compute checksum for release
          command: sha256sum "$ARTIFACT" > ./"$ARTIFACT".sha256
      - run:
          name: Publish release in GitHub
          command: |
            ghr -t "${GITHUB_TOKEN}" \
              -u "${CIRCLE_PROJECT_USERNAME}" \
              -r "${CIRCLE_PROJECT_REPONAME}" \
              -c "${CIRCLE_SHA1}" \
              -n "${CIRCLE_TAG}" \
              -b "$(git tag -l --format='%(contents)' "${CIRCLE_TAG}")" \
              -delete \
              "${CIRCLE_TAG}" ./bin/
      - notify_slack

workflows:
  version: 2
  build_and_release:
    jobs:
      - lint:
          <<: *default_contexts
          filters:
            <<: *tag_filter
      - build:
          <<: *default_contexts
          filters:
            <<: *tag_filter
      - release:
          <<: *default_contexts
          requires:
            - lint
            - build
          filters:
            branches:
              ignore: /.*/
            <<: *tag_filter
